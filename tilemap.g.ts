// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level1":
            case "level1":return tiles.createTilemap(hex`19000a`, img`
. . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . 2 2 . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . 
. 2 . . . . . . . . . 2 2 2 2 . 2 2 2 2 2 . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . 2 2 2 2 . . . . . . . . . . . 2 2 2 
. . . . . . 2 . . . . . . . . . . . . . . . . . . 
. . . 2 . 2 2 2 2 . 2 2 2 . . . . . . . 2 2 . . . 
2 2 2 2 . 2 . . 2 . 2 . . . 2 . 2 . 2 2 2 2 . 2 2 
`, [myTiles.transparency16,sprites.dungeon.floorLight4,sprites.dungeon.chestClosed,sprites.dungeon.purpleSwitchUp,sprites.dungeon.hazardLava0,sprites.dungeon.hazardHole,sprites.dungeon.hazardLava1,sprites.dungeon.floorDark0], TileScale.Sixteen);
            case "level3":
            case "level3":return tiles.createTilemap(hex`19000a`, img`
. . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . 2 2 2 2 . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . 2 . . . . . . . . . . 
. . . . . . . . . . . . . . . 2 . . . . . . . . . 
. . . . 2 . . . . . . . . . . . 2 . . . . . . . . 
. . . . . . . . . . . . . . . . . 2 . . . . . . . 
. . . . . . 2 . 2 . 2 . . . . . . . 2 2 2 . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . 
2 . . . . . . . . . . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.builtin.oceanSand1,sprites.dungeon.hazardLava1,sprites.builtin.oceanSand4,sprites.builtin.coral2,sprites.builtin.coral3,sprites.builtin.oceanDepths4,sprites.dungeon.hazardWater,sprites.dungeon.purpleSwitchUp], TileScale.Sixteen);
            case "level4":
            case "level4":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16], TileScale.Sixteen);
            case "level2":
            case "level2":return tiles.createTilemap(hex`19000a`, img`
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 . . . . . . . . . 
2 2 2 2 2 2 2 . . . . . . . . . . 2 2 2 2 . 2 . . 
2 2 2 2 2 2 2 . 2 . . 2 2 2 2 2 . . . . . . . 2 . 
2 2 2 2 2 . . . 2 . 2 2 . . . . . 2 . 2 . 2 . 2 . 
2 2 2 2 2 . . . . . . . . . 2 2 2 2 . . . . . 2 . 
2 2 2 2 2 . 2 2 . 2 . . 2 2 2 . . . . 2 2 2 2 . . 
2 2 2 2 . . . . . . . . . . . . . . . . . . . . . 
2 2 2 2 . 2 . 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 . . . . . . 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
. . 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.transparency16,sprites.builtin.brick,sprites.dungeon.floorLight2,sprites.dungeon.hazardLava1,sprites.dungeon.hazardHole], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
